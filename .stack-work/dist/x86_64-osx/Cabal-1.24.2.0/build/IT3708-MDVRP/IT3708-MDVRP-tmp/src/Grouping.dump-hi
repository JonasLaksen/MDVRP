
==================== FINAL INTERFACE ====================
2017-02-26 13:15:55.883372 UTC

interface main@main:Grouping [hpc] 8002
  interface hash: 6cb7e544806f4ed9daedc9395d1388c9
  ABI hash: 0594a9fb538132c80f82570429d158b1
  export-list hash: 20a2b046f550cb7f74e729d1f0cddb41
  orphan hash: da64de1a3b6533aef8e208b6ffb15191
  flag hash: 875509f7f502afeef2e0160fba8f350f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Grouping.grouping
  Grouping.grouping'
module dependencies: Types Utils
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Ord 7fde5c9d64d4c27431689be19182758a
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 6f24f704e82acc068dec9aa0e4966b98
import  -/  Types 84d440671d91bc7127fd44e7871db9b3
  exports: 031c722d2eaf5c00cf8059beff2d5b0e
  Customer f75d8487e3b128e128ef94d19db2ae50
  Depot 2dba77e5376bdc0022480a68274372fe
import  -/  Utils 0a3968a4b35df5acb7686f2cf2f95ca7
  exports: 91e228bb62228bf6da922e180065cfc8
  distance 3d4f30891018d3ebd08da90c0299a216
  position e0d6857d66be1fdb82013b42479cd2b8
0dc9ae8189fd134c59aa4e0c249b693a
  $sfromListWith_$sfromListWithKey ::
    (Types.Depot -> a -> a -> a)
    -> [(Types.Depot, a)] -> Data.Map.Base.Map Types.Depot a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><S,1*U>,
     Unfolding: (\ @ a
                   (f :: Types.Depot -> a -> a -> a)
                   (xs :: [(Types.Depot, a)]) ->
                 letrec {
                   go10 :: Data.Map.Base.Map Types.Depot a
                           -> [(Types.Depot, a)] -> Data.Map.Base.Map Types.Depot a
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Base.Map Types.Depot a)
                       (ds :: [(Types.Depot, a)]) ->
                     case ds of wild {
                       [] -> z
                       : x xs1
                       -> case x of wild1 { (,) k1 x1 ->
                          case k1 of ww { (,) ww1 ww2 ->
                          case Grouping.$w$sgo10 @ a f ww1 ww2 x1 z of z' { DEFAULT ->
                          go10 z' xs1 } } } }
                 } in
                 go10 (Data.Map.Base.Tip @ Types.Depot @ a) xs) -}
6646706dc4faca3b75d19a4bf2b37678
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Grouping.$trModule2
                   Grouping.$trModule1) -}
5c5f14f791a611822851c3dbed803bea
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Grouping"#) -}
0765e50471a6c221342fc8cb612d3964
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d16f2a355eafa6ddc81426cd84d29e5b
  $w$sgo10 ::
    (Types.Depot -> a1 -> a1 -> a1)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Types.Entity
    -> a1
    -> Data.Map.Base.Map Types.Depot a1
    -> Data.Map.Base.Map Types.Depot a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(U)))><L,U(U(U),U(U))><L,U><L,U><S,1*U>,
     Inline: [0] -}
21525c8727b470889b26fd0f80c99440
  grouping ::
    [Types.Depot]
    -> [Types.Customer]
    -> Data.Map.Base.Map Types.Depot [Types.Customer]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (d :: [Types.Depot]) (c :: [Types.Customer]) ->
                 {__scc {main@main:Grouping.grouping} True True} Grouping.$sfromListWith_$sfromListWithKey
                                                                   @ [Types.Customer]
                                                                   Grouping.grouping3
                                                                   (GHC.Base.map
                                                                      @ (Types.Depot,
                                                                         Types.Customer)
                                                                      @ (Types.Depot,
                                                                         [Types.Customer])
                                                                      Grouping.grouping1
                                                                      (Grouping.grouping' d c))) -}
9973a2aaf636286b550949f2244c3062
  grouping' ::
    [Types.Depot]
    -> [Types.Customer] -> [(Types.Depot, Types.Customer)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
7007534dea1398fcc2e0b8ba9fe7a9b6
  grouping1 ::
    (Types.Depot, Types.Customer) -> (Types.Depot, [Types.Customer])
  {- Unfolding: ({__scc {main@main:Grouping.grouping} False True} Grouping.grouping2) -}
dc9d82e47112557a64533e77092e1084
  grouping2 ::
    (Types.Depot, Types.Customer) -> (Types.Depot, [Types.Customer])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Types.Depot, Types.Customer)) ->
                 case ds of wild { (,) a b ->
                 {__scc {main@main:Grouping.grouping.\} True False} (a,
                                                                     GHC.Types.:
                                                                       @ Types.Customer
                                                                       b
                                                                       (GHC.Types.[]
                                                                          @ Types.Customer)) }) -}
952fb70a491ef6ca19b8e32a3107a607
  grouping3 ::
    Types.Depot
    -> [Types.Customer] -> [Types.Customer] -> [[GHC.Types.Int]]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (ds :: Types.Depot)
                   (x :: [Types.Customer])[OneShot]
                   (y :: [Types.Customer])[OneShot] ->
                 GHC.Base.++ @ [GHC.Types.Int] x y) -}
"SPEC/Grouping fromListWithKey @ Depot _" [ALWAYS] forall @ a
                                                          ($dOrd :: GHC.Classes.Ord Types.Depot)
  Data.Map.Base.fromListWithKey @ ((GHC.Types.Int, GHC.Types.Int),
                                   Types.Entity)
                                @ a
                                $dOrd
  = Grouping.$sfromListWith_$sfromListWithKey @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

