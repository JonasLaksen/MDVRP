
==================== FINAL INTERFACE ====================
2017-02-26 13:15:56.209175 UTC

interface main@main:Evolution [hpc] 8002
  interface hash: 4a7ebd5dfa04aa141e26a337ffa91d96
  ABI hash: 65e76d7ab79543b8605ac030d098d27a
  export-list hash: f41c68e791cd9e7ca055d0f73df01f82
  orphan hash: a9174926551e77c79ccc32e4a7361db4
  flag hash: 875509f7f502afeef2e0160fba8f350f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Evolution.apply
  Evolution.select
module dependencies: Types Utils
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Random 1ac23f2f24d80161face0842d1be3259
import  -/  MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Random.Class ddfc9444af705abc1e10373a9b5f135f
import  -/  MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy 13c297237e86bbce4b876f8bb98abad8
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Ord 7fde5c9d64d4c27431689be19182758a
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Types 84d440671d91bc7127fd44e7871db9b3
  exports: 031c722d2eaf5c00cf8059beff2d5b0e
import  -/  Utils 0a3968a4b35df5acb7686f2cf2f95ca7
  exports: 91e228bb62228bf6da922e180065cfc8
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random c5caaf1a0bafbf70859f9c0e2c4519d7
import  -/  random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi:System.Random.Shuffle 52bd586585909e9c12974f69a94dc391
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 84cef3a4becd62b741fe379ec3b99783
217b37c20b8be912b371251c5db77a6a
  $s$fApplicativeRandT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Random.Lazy.RandT
         g Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ g.
                  @ (Control.Monad.Trans.Random.Lazy.RandT
                       g Data.Functor.Identity.Identity)
                  (Evolution.$s$fApplicativeRandT_$s$fApplicativeRandT_$cp1Applicative
                     @ g)
                  (Control.Monad.Trans.Random.Lazy.$fApplicativeRandT_$cpure
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fApplicativeRandT_$c<*>
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fApplicativeRandT_$c*>
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fApplicativeRandT_$c<*
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity) -}
898789c458615a0d302603b9c185d0cf
  $s$fApplicativeRandT_$dFunctor ::
    GHC.Base.Functor Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Functor.Identity.$fFunctorIdentity -}
3df5d501dc310fb33d78b459626c30f9
  $s$fApplicativeRandT_$s$fApplicativeRandT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.Random.Lazy.RandT
         g Data.Functor.Identity.Identity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Evolution.$s$fApplicativeRandT_$s$fFunctorRandT -}
9797c5abecafbd635ef6dfcd315049a4
  $s$fApplicativeRandT_$s$fFunctorRandT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Random.Lazy.RandT
         g Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ g.
                  @ (Control.Monad.Trans.Random.Lazy.RandT
                       g Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.Random.Lazy.$fFunctorRandT_$cfmap
                     @ g
                     @ Data.Functor.Identity.Identity
                     Evolution.$s$fApplicativeRandT_$dFunctor)
                  (Control.Monad.Trans.Random.Lazy.$fFunctorRandT_$c<$
                     @ g
                     @ Data.Functor.Identity.Identity
                     Evolution.$s$fApplicativeRandT_$dFunctor) -}
cfe738be884c2ffedfc7c9ee858f2528
  $s$fMonadRandT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Random.Lazy.RandT
         g Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ g.
                  @ (Control.Monad.Trans.Random.Lazy.RandT
                       g Data.Functor.Identity.Identity)
                  (Evolution.$s$fApplicativeRandT @ g)
                  (Control.Monad.Trans.Random.Lazy.$fMonadRandT_$c>>=
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fMonadRandT_$c>>
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fMonadRandT_$creturn
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.Random.Lazy.$fMonadRandT_$cfail
                     @ g
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fMonadIdentity) -}
6ac3c72d373bd661b40281a2854844cf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Evolution.$trModule2
                   Evolution.$trModule1) -}
b63783787544e7159164eafff4ab2250
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Evolution"#) -}
17801f2d8b5e1d14427181a18e4273d4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
0db56c86b73057f6a8fdedb3ee2ef665
  apply ::
    System.Random.RandomGen g =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Float
    -> GHC.Types.Int
    -> (a -> GHC.Types.Float)
    -> (a -> a -> Control.Monad.Trans.Random.Lazy.Rand g [a])
    -> (a -> Control.Monad.Trans.Random.Lazy.Rand g a)
    -> [a]
    -> Control.Monad.Trans.Random.Lazy.Rand g [a]
  {- Arity: 1, Strictness: <L,U(U,U,U)> -}
45d040d64753b6fa9794b5ee560bceec
  select ::
    System.Random.RandomGen g =>
    GHC.Types.Int
    -> (a -> GHC.Types.Float)
    -> [a]
    -> Control.Monad.Trans.Random.Lazy.Rand g [a]
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U(U)><L,C(U(U))><L,1*U>,
     Unfolding: (\ @ g
                   @ a
                   ($dRandomGen :: System.Random.RandomGen g)
                   (n :: GHC.Types.Int)
                   (fitnessF :: a -> GHC.Types.Float)
                   (solutions :: [a]) ->
                 let {
                   sorted :: [a]
                   = {__scc {main@main:Evolution.select} False True} {__scc {main@main:Evolution.select.sorted} True True} GHC.List.reverse1
                                                                                                                             @ a
                                                                                                                             (Data.OldList.sortBy
                                                                                                                                @ a
                                                                                                                                (\ (x :: a)
                                                                                                                                   (y :: a)[OneShot] ->
                                                                                                                                 case fitnessF
                                                                                                                                        x of wild { GHC.Types.F# x1 ->
                                                                                                                                 case fitnessF
                                                                                                                                        y of wild1 { GHC.Types.F# y1 ->
                                                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                                                        @ GHC.Types.Bool
                                                                                                                                        (GHC.Prim.ltFloat#
                                                                                                                                           x1
                                                                                                                                           y1) of wild2 {
                                                                                                                                   GHC.Types.False
                                                                                                                                   -> case GHC.Prim.tagToEnum#
                                                                                                                                             @ GHC.Types.Bool
                                                                                                                                             (GHC.Prim.eqFloat#
                                                                                                                                                x1
                                                                                                                                                y1) of wild3 {
                                                                                                                                        GHC.Types.False
                                                                                                                                        -> GHC.Types.GT
                                                                                                                                        GHC.Types.True
                                                                                                                                        -> GHC.Types.EQ }
                                                                                                                                   GHC.Types.True
                                                                                                                                   -> GHC.Types.LT } } })
                                                                                                                                solutions)
                                                                                                                             (GHC.Types.[]
                                                                                                                                @ a)
                 } in
                 let {
                   lvl11 :: [GHC.Types.Int]
                   = {__scc {main@main:Evolution.select} False True} {__scc {main@main:Evolution.select.zipped} False True} case GHC.List.$wlenAcc
                                                                                                                                   @ a
                                                                                                                                   sorted
                                                                                                                                   0# of ww2 { DEFAULT ->
                                                                                                                            GHC.Enum.eftInt
                                                                                                                              1#
                                                                                                                              ww2 }
                 } in
                 letrec {
                   go :: [(a, (GHC.Types.Float, GHC.Types.Int))] -> [a]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(a, (GHC.Types.Float, GHC.Types.Int))]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> case y of wild1 { (,) solution ds1 ->
                          case ds1 of wild2 { (,) r i ->
                          {__scc {main@main:Evolution.select.survived.\} True False} case r of wild3 { GHC.Types.F# x ->
                                                                                     case i of wild4 { GHC.Types.I# i1 ->
                                                                                     case {__scc {main@main:Evolution.select.survived.\} False True} GHC.List.$wlenAcc
                                                                                                                                                       @ a
                                                                                                                                                       sorted
                                                                                                                                                       0# of ww2 { DEFAULT ->
                                                                                     case {__scc {main@main:Evolution.select.survived.\} False True} GHC.Prim.divideFloat#
                                                                                                                                                       (GHC.Prim.int2Float#
                                                                                                                                                          i1)
                                                                                                                                                       (GHC.Prim.int2Float#
                                                                                                                                                          ww2) of wild5 { DEFAULT ->
                                                                                     case {__scc {main@main:Evolution.select.survived.\} False True} GHC.Prim.tagToEnum#
                                                                                                                                                       @ GHC.Types.Bool
                                                                                                                                                       (GHC.Prim.leFloat#
                                                                                                                                                          x
                                                                                                                                                          (GHC.Prim.expFloat#
                                                                                                                                                             (GHC.Prim.negateFloat#
                                                                                                                                                                wild5))) of wild6 {
                                                                                       GHC.Types.False
                                                                                       -> go ys
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.:
                                                                                            @ a
                                                                                            solution
                                                                                            (go
                                                                                               ys) } } } } } } } }
                 } in
                 let {
                   lvl12 :: GHC.Types.Bool
                   = {__scc {main@main:Evolution.select} False True} {__scc {main@main:Evolution.select.selected} False True} case n of wild1 { GHC.Types.I# y ->
                                                                                                                              GHC.Prim.tagToEnum#
                                                                                                                                @ GHC.Types.Bool
                                                                                                                                (GHC.Prim.<#
                                                                                                                                   0#
                                                                                                                                   y) }
                 } in
                 ({__scc {main@main:Evolution.select} True True} ({__scc {MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy.>>=} True True} Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>=
                                                                                                                                                                                       @ Data.Functor.Identity.Identity
                                                                                                                                                                                       @ g
                                                                                                                                                                                       Data.Functor.Identity.$fMonadIdentity)
                                                                   @ [GHC.Types.Float]
                                                                   @ [a]
                                                                   (Control.Monad.Trans.Random.Lazy.$fMonadRandomRandT2
                                                                      @ g
                                                                      @ Data.Functor.Identity.Identity
                                                                      $dRandomGen
                                                                      Data.Functor.Identity.$fMonadIdentity
                                                                      @ GHC.Types.Float
                                                                      System.Random.$fRandomFloat
                                                                      Evolution.select1)
                                                                   (\ (rs :: [GHC.Types.Float]) ->
                                                                    {__scc {MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy.return} True False} GHC.Tuple.(,)
                                                                                                                                                                                             @ [a]
                                                                                                                                                                                             @ g
                                                                                                                                                                                             (let {
                                                                                                                                                                                                survived :: [a]
                                                                                                                                                                                                = let {
                                                                                                                                                                                                    zipped :: [(a,
                                                                                                                                                                                                                (GHC.Types.Float,
                                                                                                                                                                                                                 GHC.Types.Int))]
                                                                                                                                                                                                    = {__scc {main@main:Evolution.select.zipped} True True} GHC.List.zip
                                                                                                                                                                                                                                                              @ a
                                                                                                                                                                                                                                                              @ (GHC.Types.Float,
                                                                                                                                                                                                                                                                 GHC.Types.Int)
                                                                                                                                                                                                                                                              sorted
                                                                                                                                                                                                                                                              (GHC.List.zip
                                                                                                                                                                                                                                                                 @ GHC.Types.Float
                                                                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                                                                 rs
                                                                                                                                                                                                                                                                 lvl11)
                                                                                                                                                                                                  } in
                                                                                                                                                                                                  {__scc {main@main:Evolution.select.survived} True True} go
                                                                                                                                                                                                                                                            zipped
                                                                                                                                                                                              } in
                                                                                                                                                                                              {__scc {main@main:Evolution.select.selected} True True} case lvl12 of wild {
                                                                                                                                                                                                                                                        GHC.Types.False
                                                                                                                                                                                                                                                        -> GHC.Types.[]
                                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                                        GHC.Types.True
                                                                                                                                                                                                                                                        -> GHC.List.unsafeTake
                                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                                             n
                                                                                                                                                                                                                                                             survived }))
                                                                     `cast`
                                                                   (<[GHC.Types.Float]>_R
                                                                    ->_R Trans
                                                                             (<g>_R
                                                                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                                                            <([a],
                                                                                              g)>_R))
                                                                             (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                       <g>_N
                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                       <[a]>_N))))
                   `cast`
                 (Sym (Control.Monad.Trans.Random.Lazy.N:RandT[0]) <g>_N <Data.Functor.Identity.Identity>_N <[a]>_N)) -}
95ed13483ff39eb4460fa35f91c041cf
  select1 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Evolution.select3, Evolution.select2)) -}
1feba6e43e6e451f7c710a6224bb1756
  select2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
5f876c45ab622f2257dc30b650c9f764
  select3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
"SPEC/Evolution $fApplicativeRandT _ @ Identity" [ALWAYS] forall @ g
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               Data.Functor.Identity.Identity)
  Control.Monad.Trans.Random.Lazy.$fApplicativeRandT @ g
                                                     @ Data.Functor.Identity.Identity
                                                     $dMonad
  = Evolution.$s$fApplicativeRandT @ g
"SPEC/Evolution $fApplicativeRandT_$cp1Applicative _ @ Identity" [ALWAYS] forall @ g
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               Data.Functor.Identity.Identity)
  Control.Monad.Trans.Random.Lazy.$fApplicativeRandT_$cp1Applicative @ g
                                                                     @ Data.Functor.Identity.Identity
                                                                     $dMonad
  = Evolution.$s$fApplicativeRandT_$s$fApplicativeRandT_$cp1Applicative
      @ g
"SPEC/Evolution $fFunctorRandT _ @ Identity" [ALWAYS] forall @ g
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Trans.Random.Lazy.$fFunctorRandT @ g
                                                 @ Data.Functor.Identity.Identity
                                                 $dFunctor
  = Evolution.$s$fApplicativeRandT_$s$fFunctorRandT @ g
"SPEC/Evolution $fMonadRandT _ @ Identity" [ALWAYS] forall @ g
                                                           ($dMonad :: GHC.Base.Monad
                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Random.Lazy.$fMonadRandT @ g
                                               @ Data.Functor.Identity.Identity
                                               $dMonad
  = Evolution.$s$fMonadRandT @ g
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

